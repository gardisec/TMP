version: '3.8'

services:
  api:
    container_name: maritime-api
    image: ghcr.io/gardisec/maritime-api:latest
    restart: unless-stopped
    env_file: .env 
    networks:
      - maritime-network
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    container_name: maritime-frontend
    image: ghcr.io/gardisec/maritime-frontend:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - maritime-network
    depends_on:
      - api

  telegram-bot:
    container_name: maritime-telegram-bot
    image: ghcr.io/gardisec/maritime-tg-bot:latest
    restart: unless-stopped
    env_file: .env
    networks:
      - maritime-network

  postgres:
    image: postgres:15-alpine
    container_name: maritime-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_tmp/init:/docker-entrypoint-initdb.d
    env_file: .env
    networks:
      - maritime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: maritime-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    env_file: .env
    networks:
      - maritime-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  maritime-network:
    name: maritime-network

volumes:
  postgres_data:
  pgadmin_data: